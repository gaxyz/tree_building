mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 ) %>%
plot()
d %>% select(X2 , Y ) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 ) %>%
plot()
cor(method = "spearman) " %>%
d %>% select( -X1 , -X4 , -X6 )  %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 ) %>%
cor(method = "spearman" ) %>%
corrplot(method = "number", type = "upper")
d %>% select( -X1 , -X4 , -X6 )  %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 ) %>%
cor(., method = "spearman" ) %>%
corrplot(., method = "number", type = "upper")
d %>% select( -X1 , -X4 , -X6 )  %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 ) %>%
cor(., method = "spearman" ) %>%
corrplot(., method = "number", type = "upper")
d %>% select( X3 , X8 ,  X9 , Y ) %>% pairs()
d$X4
na_count <-sapply(d, function(y) sum(length(which(is.na(y)))))
na_count
Al explorar los datos, nos encontramos con valores faltantes, particularmente en `X4`:
``` {r  }
na_count <-sapply(d, function(y) sum(length(which(is.na(y)))))
nas
nas <-sapply(d, function(y) sum(length(which(is.na(y)))))
nas
summary(full)
summary(full)
d$X6 %>% class()
d %>% select(  X1, Y   ) %>% plot()
lim( d, Y ~ X4 )
x4 <- lm( d, Y ~ X4 )
x4 <- lm( data = d, Y ~ X4 )
summary(x4)
d %>% select(  X1, Y   ) %>% plot()
x4 <- lm( data = d, Y ~ X4 )
summary(x4)
plot(x4)
plot(x4)
abline(x4)
d %>% select(  X1, Y   ) %>% plot()
x4)
abline(x4)
d %>% select(  X1, Y   ) %>% plot()
abline(x4)
d %>% select(  X1, Y   ) %>% plot()
abline(x4)
d %>% select(  X1, Y   ) %>% plot()
abline(x4)
abline(x4, col = "red")
x4 <- lm( data = d, Y ~ X4 )
summary(x4)
d %>% select(  X1, Y   ) %>% plot()
abline(x4, col = "red")
full <- lm( Y ~ . , data = d )
summary(full)
d %>% select(  X6, Y   ) %>% plot()
factor( d$X6, levels = c("Muy Insatisfecho",
"Normal",
"Satisfecho",
"Muy Satisfecho" )  )
d$X6
factor( d$X6, levels = c("Muy Insatisfecho",
factor( d$X6, levels = c("Muy Insatisfecho",
"Normal",
"Satisfecho",
"Muy Satisfecho" )  )
d_adj <- d %>% select(-X4, -X7) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 )
adj <- lm( Y ~ . , data = d_adj )
summary(adj)
summary(adj)
summary(full)
d_adj <- d %>% select(-X4, -X7)
adj <- lm( Y ~ . , data = d_adj )
summary(adj)
summary(adj)
d_adj <- d %>% select(-X4, -X7) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 )
adj <- lm( Y ~ . , data = d_adj )
summary(adj)
summary(adj)
anova(full, adj )
full <- lm( Y ~ . , data = d  %>% na.omit()   )
summary(full)
anova(full, adj )
d_adj <- d %>% select(-X4, -X7) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 )
adj <- lm( Y ~ . , data = d_adj )
summary(adj)
anova(full, adj )
full
summary(full)
d <- d %>% na.omit()
d_adj <- d %>% select(-X4, -X7) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 )
size(d)
dim(d)
dim(d_adj)
AIC(full)
AIC(full)
AIC(adj)
par(mfrow=c(2,2))
plot(full)
par(mfrow(1,1))
par(mfrow=c(2,2))
plot(full)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(adj)
par(mfrow=c(1,1))
summary(adj)
d_red <- d_adj %>% select(-X1, -X5, -X9)
red <- lm( Y ~ . , data = d_red)
summary(red)
summary(red)
d_red <- d_adj %>% select( -X5, -X9)
red <- lm( Y ~ . , data = d_red)
summary(red)
summary(red)
d_red <- d_adj %>% select( -X5, -X9)
red <- lm( Y ~ . , data = d_red)
summary(red)
summary(red)
AIC(red)
AIC(full)
AIC( adj )
AIC(red)
El AIC disminuye considerablemente para el modelo reducido, indicando que este modelo es el mejor modelo de los tres.
d_adj <- d %>% select( -X7) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 )
d_red <- d_adj %>% select( -X5, -X9)
red <- lm( Y ~ . , data = d_red)
summary(red)
AIC(red)
AIC(full)
AIC( adj )
AIC(red)
AIC(full)
AIC( adj )
AIC(red)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library( corrplot )
setwd("~/Facultad/Analisis Multivariado/proyecto/")
d <- read.table("Datos.csv",
sep = ",",header = TRUE
)
names(d)
d %>% head()
nas <-sapply(d, function(y) sum(length(which(is.na(y)))))
nas
pairs(d)
pcorr <- d %>% select( -X1  , -X4 , -X6  )  %>%
cor(method = "pearson")
corrplot(pcorr, method = "number", type = "upper")
scorr <- d %>% select( -X1  , -X4 , -X6  )  %>%
cor(method = "spearman")
corrplot(scorr, method = "number", type = "upper")
d %>% select( X2, X7 , Y ) %>%pairs()
d %>% select(X2 , Y ) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 ) %>%
plot()
d %>% select( -X1 , -X4 , -X6 )  %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 ) %>%
cor(., method = "spearman" ) %>%
corrplot(., method = "number", type = "upper")
d %>% select( X3 , X8 ,  X9 , Y ) %>% pairs()
d %>% select(  X1, X4, X6, Y   ) %>% pairs()
x4 <- lm( data = d, Y ~ X4 )
summary(x4)
d %>% select(  X1, Y   ) %>% plot()
abline(x4, col = "red")
full <- lm( Y ~ . , data = d  %>% na.omit()   )
summary(full)
par(mfrow=c(2,2))
plot(full)
par(mfrow=c(1,1))
d_adj <- d %>% select(-X4, -X7) %>%
mutate( X2 = (X2 - mean(X2) ) / sd(X2)  ) %>%
filter(  abs(X2) < 2 )
adj <- lm( Y ~ . , data = d_adj )
summary(adj)
par(mfrow=c(2,2))
plot(adj)
par(mfrow=c(1,1))
AIC(full)
AIC(adj)
d_red <- d_adj %>% select( -X5, -X9)
red <- lm( Y ~ . , data = d_red)
summary(red)
AIC(full)
AIC( adj )
AIC(red)
summary(red)
d_red <- d_adj %>% select( -X1 , -X5, -X9)
red <- lm( Y ~ . , data = d_red)
summary(red)
AIC(full)
AIC( adj )
AIC(red)
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
knitr::opts_chunk$set(echo = TRUE )
# Def function to easily get tree -------------
getTree <- function(name){
treedir <- "./trees/"
ext <- ".phy_phyml_tree.txt"
fileName <- paste( treedir, name, ext, sep = "" )
return( read.tree(fileName) )
}
d_methods <- c("euclidean",
"symmetric",
"weightedRF",
"quartet",
"triplet")
matrices_list <- list()
for ( i in 1:length(d_methods)  ){
distance_method <- d_methods[i]
distance_file <- paste("tree-distance/",
distance_method,
"_distance.csv", sep = "")
d_matrix <- read.csv(file = distance_file,
row.names = 1)  %>% as.matrix()
matrices_list[[i]] <- d_matrix
}
library( dplyr )
library( pheatmap )
library(ape)
library(corrplot)
d_methods <- c("euclidean",
"symmetric",
"weightedRF",
"quartet",
"triplet")
matrices_list <- list()
for ( i in 1:length(d_methods)  ){
distance_method <- d_methods[i]
distance_file <- paste("tree-distance/",
distance_method,
"_distance.csv", sep = "")
d_matrix <- read.csv(file = distance_file,
row.names = 1)  %>% as.matrix()
matrices_list[[i]] <- d_matrix
}
names( matrices_list ) <- d_methods
setwd("Facultad/Taller de Bioinformatica/yuyo/tree_building/")
# Def function to easily get tree -------------
getTree <- function(name){
treedir <- "./trees/"
ext <- ".phy_phyml_tree.txt"
fileName <- paste( treedir, name, ext, sep = "" )
return( read.tree(fileName) )
}
d_methods <- c("euclidean",
"symmetric",
"weightedRF",
"quartet",
"triplet")
matrices_list <- list()
for ( i in 1:length(d_methods)  ){
distance_method <- d_methods[i]
distance_file <- paste("tree-distance/",
distance_method,
"_distance.csv", sep = "")
d_matrix <- read.csv(file = distance_file,
row.names = 1)  %>% as.matrix()
matrices_list[[i]] <- d_matrix
}
names( matrices_list ) <- d_methods
m <- matrices_list["symmetric"][[1]]
cmdscale( m )
nmds <- cmdscale( m, 2 )
plot(nmds)
m <- matrices_list["euclidean"][[1]]
nmds <- cmdscale( m, 2 )
plot(nmds)
m <- matrices_list["triplet"][[1]]
nmds <- cmdscale( m, 2 )
plot(nmds)
m <- matrices_list["quartet"][[1]]
nmds <- cmdscale( m, 2 )
plot(nmds)
m <- matrices_list["weightedRF"][[1]]
nmds <- cmdscale( m, 2 )
plot(nmds)
m <- matrices_list["weightedRF"][[1]]
nmds <- cmdscale( m, 3 )
plot(nmds)
plot(nmds[,1], nmds[,2])
m <- matrices_list["symmetric"][[1]]
nmds <- cmdscale( m, 3 )
plot(nmds[,1], nmds[,2])
plot(nmds[,3], nmds[,2])
cmdscale( m, 3 )
library( tidyverse )
nmds <- cmdscale( m, 3 ) %>% rownames_to_column("cluster")
cmdscale( m, 3 )
cmdscale( m, 3 ) %>% class()
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
nmds
nmds %>% jhead()
nmds %>% head()
ggplot(nmds) +
geom_text( aes(x = V1, y = V2 ) )
ggplot(nmds) +
geom_text( aes(x = V1, y = V2, label = cluster ) )
par(mfrow=c(3,1))
ggplot(nmds) +
geom_text( aes(x = V1, y = V2, label = cluster ) )
ggplot(nmds) +
geom_text( aes(x = V1, y = V2, label = cluster ) )
ggplot(nmds) +
geom_text( aes(x = V2, y = V3, label = cluster ) )
par(mfrow=c(3,1))
ggplot(nmds) +
geom_text( aes(x = V1, y = V2, label = cluster ) )
ggplot(nmds) +
geom_text( aes(x = V1, y = V2, label = cluster ) )
ggplot(nmds) +
geom_text( aes(x = V2, y = V3, label = cluster ) )
library(gridExtra)
m <- matrices_list["symmteric"][[1]]
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
m <- matrices_list["symmteric"][[1]]
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
cmdscale( m, 3 )
m
# Def function to easily get tree -------------
getTree <- function(name){
treedir <- "./trees/"
ext <- ".phy_phyml_tree.txt"
fileName <- paste( treedir, name, ext, sep = "" )
return( read.tree(fileName) )
}
d_methods <- c("euclidean",
"symmetric",
"weightedRF",
"quartet",
"triplet")
matrices_list <- list()
for ( i in 1:length(d_methods)  ){
distance_method <- d_methods[i]
distance_file <- paste("tree-distance/",
distance_method,
"_distance.csv", sep = "")
d_matrix <- read.csv(file = distance_file,
row.names = 1)  %>% as.matrix()
matrices_list[[i]] <- d_matrix
}
names( matrices_list ) <- d_methods
m <- matrices_list["symmetric"][[1]]
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ) )
d13 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V3 ) )
d23 <- ggplot(nmds) +
geom_point( aes(x = V2, y = V3 ) )
gridd.arrange( d12, d13, d23 )
grid.arrange( d12, d13, d23 )
?grid.arrange
grid.arrange( d12, d13, d23, ncol = 3 )
?grid.arrange
grid.arrange( d12, d13, d23,
ncol = 3, widths = 3,
heights = 3 )
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(3,3,3),
heights = c(3,3,3) )
size = 6
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(size,size,size),
heights = c(size,size,size) )
par(mfrow=c(1,1))
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ) )
d13 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V3 ) )
d23 <- ggplot(nmds) +
geom_point( aes(x = V2, y = V3 ) )
size = 6
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(size,size,size),
heights = c(size,size,size) )
d12 <- ggplot(nmds, aes(size = 2)) +
geom_point( aes(x = V1, y = V2 ) )
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(size,size,size),
heights = c(size,size,size) )
d12 <- ggplot(nmds, aes(size = 0.4, alpha = 0.8)) +
geom_point( aes(x = V1, y = V2 ) )
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(size,size,size),
heights = c(size,size,size) )
d12 <- ggplot(nmds, size = 0.4, alpha = 0.8) +
geom_point( aes(x = V1, y = V2 ) )
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(size,size,size),
heights = c(size,size,size) )
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ), size = 0.4, alpha = 0.8 )
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(size,size,size),
heights = c(size,size,size) )
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ), size = 0.4, alpha = 0.8 )
d13 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V3 ), size = 0.4, alpha = 0.8  )
d23 <- ggplot(nmds) +
geom_point( aes(x = V2, y = V3 ), size = 0.4, alpha = 0.8  )
size = 6
grid.arrange( d12, d13, d23,
ncol = 3, widths = c(size,size,size),
heights = c(size,size,size) )
rep(6,3)
grid.arrange( d12, d13, d23,
ncol = 3, widths = size,
heights = size )
size = rep(6,3)
grid.arrange( d12, d13, d23,
ncol = 3, widths = size,
heights = size )
m <- matrices_list["euclidean"][[1]]
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ),
size = 0.4, alpha = 0.8 )
d13 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V3 ),
size = 0.4, alpha = 0.8  )
d23 <- ggplot(nmds) +
geom_point( aes(x = V2, y = V3 ),
size = 0.4, alpha = 0.8  )
size = rep(6,3)
grid.arrange( d12, d13, d23,
ncol = 3, widths = size,
heights = size )
m <- matrices_list["quartet"][[1]]
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ),
size = 0.4, alpha = 0.8 )
d13 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V3 ),
size = 0.4, alpha = 0.8  )
d23 <- ggplot(nmds) +
geom_point( aes(x = V2, y = V3 ),
size = 0.4, alpha = 0.8  )
size = rep(6,3)
grid.arrange( d12, d13, d23,
ncol = 3, widths = size,
heights = size )
m <- matrices_list["triplet"][[1]]
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ),
size = 0.4, alpha = 0.8 )
d13 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V3 ),
size = 0.4, alpha = 0.8  )
d23 <- ggplot(nmds) +
geom_point( aes(x = V2, y = V3 ),
size = 0.4, alpha = 0.8  )
size = rep(6,3)
grid.arrange( d12, d13, d23,
ncol = 3, widths = size,
heights = size )
m <- matrices_list["weightedRF"][[1]]
nmds <- cmdscale( m, 3 ) %>%
as.data.frame() %>%
rownames_to_column("cluster")
d12 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V2 ),
size = 0.4, alpha = 0.8 )
d13 <- ggplot(nmds) +
geom_point( aes(x = V1, y = V3 ),
size = 0.4, alpha = 0.8  )
d23 <- ggplot(nmds) +
geom_point( aes(x = V2, y = V3 ),
size = 0.4, alpha = 0.8  )
size = rep(6,3)
grid.arrange( d12, d13, d23,
ncol = 3, widths = size,
heights = size )
